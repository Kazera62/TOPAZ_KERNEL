name: "YASK CLO Kernel Build"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  OUT_DIR: "out"
  DEFCONFIG_NAME: "gki_defconfig"
  localVersion: "-YASK/CLO"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio rsync git zip dwarves libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: Download Clang Toolchain
        run: |
          latest_url=$(curl -sL "https://api.github.com/repos/greenforce-project/greenforce_clang/releases/latest" | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)
          mkdir -p clang
          wget --progress=bar:force -O "clang/clang.tar.gz" "$latest_url"
          tar -xf clang/clang.tar.gz -C clang
          rm -f clang/clang.tar.gz
          echo "$PWD/clang/bin" >> $GITHUB_PATH

      - name: Setup swap (25G)
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 25

      - name: Tune Swap
        run: |
          echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: Setup localversion & configs
        run: |
          echo 'CONFIG_LOCALVERSION="${{ env.localVersion }}"' >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      - name: Apply GKI fixup patch
        run: |
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          PATCH_FILE="0001-gki-fixup.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] && patch -p1 < "$PATCH_FILE"

      - name: Apply SUSFS & Kernel tweaks
        run: |
          PATCH_URLS=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Implement-SUSFS-v1.5.7-syscall-hooks.patch"
          )
          for PATCH_URL in "${PATCH_URLS[@]}"; do
            PATCH_FILE=$(basename "$PATCH_URL")
            curl -L -o "$PATCH_FILE" "$PATCH_URL"
            [ -f "$PATCH_FILE" ] && patch -p1 < "$PATCH_FILE"
          done

      - name: Update KernelSU
        run: |
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-stable

      - name: Add SUSFS configs
        run: |
          CONFIG_FILE="./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          CONFIGS=(
            "CONFIG_KSU=y" 
            "CONFIG_KSU_MANUAL_HOOKS=y" 
            "CONFIG_KPM=y"
            "CONFIG_KALLSYMS=y" 
            "CONFIG_KSU_WITH_KPROBES=n" 
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"

      - name: Append custom Makefile line
        run: |
          echo 'KBUILD_CFLAGS += -Wno-default-const-init-unsafe' >> Makefile

      - name: Generate defconfig
        run: |
          make O=out ${{ env.DEFCONFIG_NAME }}

      - name: Build kernel
        run: |
          export PATH=$PWD/clang/bin:$PATH
          make -j$(nproc) O=out \
            ARCH=arm64 LLVM=1 LTO=thin \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            AR=llvm-ar \
            CC=clang

      - name: Patch Image with KPM
        run: |
          cd out/arch/arm64/boot/
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod +x patch
          ./patch
          rm -rf Image
          mv oImage Image

      - name: Pack AnyKernel3
        run: |
          [ ! -d "AnyKernel3" ] && git clone https://github.com/topnotchfreaks/AnyKernel3.git --depth=1
          KERNEL_IMAGE_PATH="out/arch/arm64/boot/Image"
          [ -f "$KERNEL_IMAGE_PATH" ] || KERNEL_IMAGE_PATH=$(find out/arch/arm64/boot -name "Image*" | head -n 1)
          [ -z "$KERNEL_IMAGE_PATH" ] && { echo "Error: No kernel image found"; exit 1; }
          cp "$KERNEL_IMAGE_PATH" AnyKernel3/Image
          KERNEL_VERSION=$(make kernelversion)
          BUILD_DATE=$(date +'%Y-%m-%d')
          ZIP_NAME="Anykernel3_YASK-CLO-${KERNEL_VERSION}-${BUILD_DATE}.zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ./${{ env.ZIP_NAME }}
          retention-days: 7

      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./${{ env.ZIP_NAME }}
          tag_name: "YASK"

      - name: Send ZIP to Telegram
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -f "${{ env.ZIP_NAME }}" ]; then
            curl -F document=@"${{ env.ZIP_NAME }}" -F chat_id="$TELEGRAM_CHAT_ID" -F caption="âœ… Build Sukses: ${{ env.ZIP_NAME }}" "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument"
          fi