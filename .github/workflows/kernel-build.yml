name: "Simple Kernel Build"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  OUT_DIR: "out"
  DEFCONFIG_NAME: "gki_defconfig"
  localVersion: "-YASK/CLO"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bc curl flex cpio rsync git zip dwarves \
            libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: Download Clang Toolchain (Greenforce)
        run: |
          latest_url=$(curl -sL "https://api.github.com/repos/greenforce-project/greenforce_clang/releases/latest" \
            | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)
          mkdir -p clang
          wget -O clang/clang.tar.gz "$latest_url"
          tar -xf clang/clang.tar.gz -C clang
          rm clang/clang.tar.gz
          echo "$PWD/clang/bin" >> $GITHUB_PATH

      - name: Setup swap (25G)
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 25

      - name: Tune Swap
        run: |
          echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: Set localversion di defconfig
        run: |
          echo 'CONFIG_LOCALVERSION="${{ env.localVersion }}"' >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      - name: Generate defconfig
        run: |
          make O=${{ env.OUT_DIR }} ${{ env.DEFCONFIG_NAME }}

      - name: Build kernel
        run: |
          export PATH=$PWD/clang/bin:$PATH
          make -j$(nproc) O=${{ env.OUT_DIR }} \
            ARCH=arm64 LLVM=1 LTO=thin \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            AR=llvm-ar \
            CC=clang

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel image
        run: |
          KERNEL_IMG="${{ env.OUT_DIR }}/arch/arm64/boot/Image"
          [ -f "$KERNEL_IMG" ] || KERNEL_IMG=$(find ${{ env.OUT_DIR }}/arch/arm64/boot -name "Image*" | head -n 1)
          [ -z "$KERNEL_IMG" ] && { echo "Error: No kernel image found!"; exit 1; }
          cp "$KERNEL_IMG" AnyKernel3/Image

      - name: Pack AnyKernel3 ZIP
        run: |
          KERNEL_VERSION=$(make kernelversion)
          BUILD_DATE=$(date +'%Y-%m-%d')
          ZIP_NAME="Anykernel3_YASK-CLO-${KERNEL_VERSION}-${BUILD_DATE}.zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ./${{ env.ZIP_NAME }}
          retention-days: 7

      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./${{ env.ZIP_NAME }}
          tag_name: "YASK"

      - name: Kirim ke Telegram (jika secrets sudah ada)
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -f "${{ env.ZIP_NAME }}" ] && [ -n "$TELEGRAM_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            curl -F document=@"${{ env.ZIP_NAME }}" -F chat_id="$TELEGRAM_CHAT_ID" -F caption="âœ… Build Sukses: ${{ env.ZIP_NAME }}" "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument"
          fi