name: "Build YASK CLO"

env:
  OUT_DIR: "out"

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    env:
      kernelDir: common_gki
      kernelName: common
      kernelRepo: Kazera62/TOPAZ_KERNEL
      kernelBranch: main
      DEFCONFIG_NAME: gki_defconfig
      OUT_DIR: "out"
      localVersion: "-YASK/CLO"

    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "‚ú® Setup workspace"
        run: |
          mkdir -p $kernelDir
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio rsync git zip dwarves libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: "üåü Clone kernel source"
        working-directory: ./${{ env.kernelDir }}
        run: |
          set -x
          git clone --recursive --branch ${{ env.kernelBranch }} \
            https://github.com/${{ env.kernelRepo }}.git ${{ env.kernelName }} --depth=1

      - name: "üí´ Get Toolchains"
        run: |
          set -e
          get_latest_github_release() {
            local repo_url="$1"
            latest_url=$(curl -sL "https://api.github.com/repos/$repo_url/releases/latest" | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)
            if [[ -z "$latest_url" ]]; then
              echo "‚ùå Failed to fetch latest release from $repo_url!"
              exit 1
            fi
            printf "%s" "$latest_url"
          }
          clang_url=$(get_latest_github_release "greenforce-project/greenforce_clang")
          echo "‚úÖ Clang URL: $clang_url"
          mkdir -p clang
          if [[ "$clang_url" == *.tar.gz ]]; then
            echo "üöÄ Downloading latest Clang..."
            wget --progress=bar:force -O "clang/clang.tar.gz" "$clang_url" || { echo "‚ùå Failed to download Clang!"; exit 1; }
            echo "üì¶ Extracting Clang..."
            tar -xf clang/clang.tar.gz -C clang || { echo "‚ùå Extraction failed!"; exit 1; }
            rm -f clang/clang.tar.gz
          else
            echo "üöÄ Cloning Clang..."
            git clone --recursive --depth=1 "$clang_url" clang || { echo "‚ùå Cloning failed!"; exit 1; }
          fi
          if [ -d "clang/bin" ]; then
            CLANG_PATH="${{ github.workspace }}/clang/bin"
          else
            CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
            CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
          fi
          if [ ! -f "$CLANG_PATH/clang" ]; then
            echo "‚ùå Clang binary not found in $CLANG_PATH!"
            ls -R clang
            exit 1
          fi
          echo "‚úÖ Using Clang from $CLANG_PATH"
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH

      - name: üìê Setup swap 25G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 25

      - name: üìê Tune Swap
        run: |
          echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: "üõ† Set localversion name in defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo 'CONFIG_LOCALVERSION="${{ env.localVersion }}"' >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      # ... PATCH STEPS TIDAK DIUBAH ...

      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          make O=../../../../${{ env.OUT_DIR }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          PATH: ${{ env.CLANG_PATH }}:${{ env.PATH }}
        run: |
          export KBUILD_BUILD_USER="Automated"
          export KBUILD_BUILD_HOST="GitHub-Actions"
          make O=../../../../${{ env.OUT_DIR }} \
            ARCH=arm64 LLVM=1 LTO=thin \
            CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy STRIP=llvm-strip \
            -j$(nproc --all)

      # ... STEP PATCH IMAGE, PACK ANYKERNEL3, DAN UPLOAD ARTIFACT TETAP ...

      - name: "‚¨ÜÔ∏è Upload Kernel Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}/${{ env.ZIP_NAME }}
          retention-days: 7